// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $(function() {
    var App, Language, NewPhrase, Phrase, PhraseView, _ref, _ref1, _ref2, _ref3;
    Phrase = (function(_super) {
      __extends(Phrase, _super);

      function Phrase() {
        _ref = Phrase.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      Phrase.prototype.urlRoot = '/phrase';

      return Phrase;

    })(Backbone.Model);
    PhraseView = (function(_super) {
      __extends(PhraseView, _super);

      function PhraseView() {
        this.render = __bind(this.render, this);
        _ref1 = PhraseView.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      PhraseView.prototype.initialize = function() {
        App.on('sync', this.render);
        return App.fetch({
          cache: false
        });
      };

      PhraseView.prototype.render = function() {
        var svg;
        svg = d3.select('svg');
        svg.append('circle').attr('cx', 330).attr('cy', 120).attr('r', 10).style('fill', 'white');
        svg.append('circle').attr('cx', 310).attr('cy', 140).attr('r', 7).style('fill', 'white');
        svg.append('ellipse').attr('cx', 600).attr('cy', 100).attr('rx', 250).attr('ry', 65).style('fill', 'white');
        return svg.append('text').attr('x', 370).attr('y', 105).text(App.get('text')).attr('font-family', '"Lucida Grande", Helvetica, Arial, sans-serif').attr('font-size', '17px').attr('fill', 'black');
      };

      return PhraseView;

    })(Backbone.View);
    NewPhrase = (function(_super) {
      __extends(NewPhrase, _super);

      function NewPhrase() {
        _ref2 = NewPhrase.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      NewPhrase.prototype.events = {
        'click button': function() {
          return $.post('/phrase', {
            last: App.id
          }, function(data) {
            App.set(data);
            return App.fetch();
          });
        }
      };

      return NewPhrase;

    })(Backbone.View);
    Language = (function(_super) {
      __extends(Language, _super);

      function Language() {
        this.render = __bind(this.render, this);
        _ref3 = Language.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      Language.prototype.initialize = function() {
        return App.on('sync', this.render);
      };

      Language.prototype.render = function() {
        return this.$('.lang').text(App.get('lang') === 'fr' ? 'English' : 'French');
      };

      Language.prototype.events = {
        'click button': function() {
          return $.post('lang/' + (App.get('lang') === 'fr' ? 'en' : 'fr'), function() {
            return App.fetch({
              cache: false
            });
          });
        }
      };

      return Language;

    })(Backbone.View);
    App = new Phrase({
      id: 1
    });
    new PhraseView({
      el: 'article'
    });
    new NewPhrase({
      el: '.new-phrase'
    });
    return new Language({
      el: '.language'
    });
  });

}).call(this);
